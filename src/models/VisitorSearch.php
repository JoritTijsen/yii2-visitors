<?php

namespace johnsnook\visitor\models;

use yii\base\Model;
use yii\data\ActiveDataProvider;
use johnsnook\visitor\models\Visitor;
use johnsnook\parsel\ParselQuery;

/**
 * VisitorSearch represents the model behind the search form of `johnsnook\visitor\models\Visitor`.
 */
class VisitorSearch extends Visitor {

    /**
     * @var string Virtual field to pass user query for yii2-parsel
     */
    public $userQuery;

    /**
     * @var string Any parser errors that may have occurred
     */
    public $queryError;

    /**
     * @var string The sql string generated by ParselQuery. For debugging purposes
     */
    public $sql;

    /**
     * @var array The fields to search with ParselQuery
     */
    private $fields = ['ip' => 'v.ip', 'city', 'region', 'country', 'asn', 'organization', 'proxy', 'request', 'referer'];

    /**
     * {@inheritdoc}
     */
    public function rules() {
        return [
            //[['id'], 'integer'],
            [['ip', 'userQuery'], 'safe'],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function scenarios() {
        // bypass scenarios() implementation in the parent class
        return Model::scenarios();
    }

    /**
     * Creates data provider instance with search query applied
     *
     * @param array $params
     *
     * @return ActiveDataProvider
     */
    public function search($params) {
        $this->load($params);

        $parsel = new ParselQuery([
            'userQuery' => $this->userQuery,
            'searchFields' => $this->fields,
            'dbQuery' => Visitor::find()
                    ->select(['v.ip'])
                    ->distinct()
                    ->addSelect(['city', 'region', 'country', 'visits', 'asn', 'organization', 'updated_at'])
                    ->from('visitor v')
                    ->leftJoin('visitor_log vl', 'v.ip = vl.ip')
        ]);


        $dataProvider = new ActiveDataProvider([
            'query' => $parsel->dbQuery,
            'pagination' => [
                'pageSize' => 20,
            ],
            'sort' => [
                'defaultOrder' => [
                    'updated_at' => SORT_DESC,
                ]
            ],
        ]);

        return $dataProvider;
    }

}
